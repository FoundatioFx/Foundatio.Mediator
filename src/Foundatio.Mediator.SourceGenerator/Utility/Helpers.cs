namespace Foundatio.Mediator.Utility;

internal static class Helpers
{
    public static void AddGeneratedFileHeader(this IndentedStringBuilder source)
    {
        source.AppendLine("// <auto-generated>");
        source.AppendLine("// This file was generated by Foundatio.Mediator source generators.");
        source.AppendLine("// Changes to this file may be lost when the code is regenerated.");
        source.AppendLine("// </auto-generated>");
        source.AppendLine();
        source.AppendLine("#nullable enable");
        source.AppendLine();
    }

    /// <summary>
    /// Gets the simple type name from a full type name, handling both . and + separators.
    /// This is useful for generating clean class names in code generation.
    /// </summary>
    /// <param name="fullTypeName">The full type name including namespace and nested type separators</param>
    /// <returns>Simple type name suitable for use as a class name</returns>
    public static string GetSimpleTypeName(string fullTypeName)
    {
        // Get the last part of the type name, handling both . and + separators
        int lastDotIndex = fullTypeName.LastIndexOf('.');
        int lastPlusIndex = fullTypeName.LastIndexOf('+');
        int lastSeparatorIndex = Math.Max(lastDotIndex, lastPlusIndex);

        string simpleName = lastSeparatorIndex >= 0
            ? fullTypeName.Substring(lastSeparatorIndex + 1)
            : fullTypeName;

        // Clean up the name for use as a class name
        return simpleName.Replace("<", "_").Replace(">", "_").Replace(",", "_").Replace("+", "_");
    }
}
