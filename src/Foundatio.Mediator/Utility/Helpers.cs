using System.Diagnostics;
using System.Reflection;

namespace Foundatio.Mediator.Utility;

internal static class Helpers
{
    public static void AddGeneratedFileHeader(this IndentedStringBuilder source)
    {
        source.AppendLine("// <auto-generated>");
        source.AppendLine("// This file was generated by Foundatio.Mediator source generators.");
        source.AppendLine("// Changes to this file may be lost when the code is regenerated.");
        source.AppendLine("// </auto-generated>");
        source.AppendLine();
        source.AppendLine("#nullable enable");
        source.AppendLine();
    }

    public static void AddGeneratedCodeAttribute(this IndentedStringBuilder source)
    {
        var toolName = "Foundatio.Mediator";
        var toolVersion = GetToolVersion();

        source.AppendLine($"[global::System.CodeDom.Compiler.GeneratedCode(\"{toolName}\", \"{toolVersion}\")]");
    }

    private static readonly Lazy<string> _toolVersion = new(() =>
    {
        var asm = typeof(Helpers).Assembly;

        var infoVersion = asm.GetCustomAttribute<AssemblyInformationalVersionAttribute>()?.InformationalVersion;
        if (!String.IsNullOrEmpty(infoVersion))
            return infoVersion!;

        return asm.GetName().Version?.ToString() ?? "1.0.0";
    });

    private static string GetToolVersion() => _toolVersion.Value;

    public static string ToIdentifier(this string name)
    {
        if (string.IsNullOrEmpty(name))
            return String.Empty;

        return new String(name.Select(c => char.IsLetterOrDigit(c) || c == '_' ? c : '_').ToArray());
    }

    public static string ToCamelCase(this string name)
    {
        if (string.IsNullOrEmpty(name))
            return String.Empty;

        return char.ToLower(name[0]) + name.Substring(1);
    }
}
