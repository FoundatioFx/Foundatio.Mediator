{
  Diagnostics: null,
  GeneratorDiagnostics: null,
  GeneratedTrees: [
    {
      HintName: InterceptsLocationAttribute.g.cs,
      Source:
// This file was generated by Foundatio.Mediator source generators.
// Changes to this file may be lost when the code is regenerated.
// </auto-generated>

#nullable enable

using System;

namespace System.Runtime.CompilerServices;

/// <summary>
/// Indicates that a method is an interceptor and provides the location of the intercepted call.
/// </summary>
[global::System.CodeDom.Compiler.GeneratedCode("Foundatio.Mediator", "<version>")]
[global::System.AttributeUsage(global::System.AttributeTargets.Method, AllowMultiple = true)]
internal sealed class InterceptsLocationAttribute : global::System.Attribute
{
    /// <summary>
    /// Initializes a new instance of the <see cref="InterceptsLocationAttribute"/> class.
    /// </summary>
    /// <param name="version">The version of the location encoding.</param>
    /// <param name="data">The encoded location data.</param>
    public InterceptsLocationAttribute(int version, string data)
    {
        Version = version;
        Data = data;
    }

    /// <summary>
    /// Gets the version of the location encoding.
    /// </summary>
    public int Version { get; }

    /// <summary>
    /// Gets the encoded location data.
    /// </summary>
    public string Data { get; }
}

    },
    {
      HintName: PingHandler_Ping_Handler.g.cs,
      Source:
// This file was generated by Foundatio.Mediator source generators.
// Changes to this file may be lost when the code is regenerated.
// </auto-generated>

#nullable enable

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

namespace Foundatio.Mediator;

[global::System.CodeDom.Compiler.GeneratedCode("Foundatio.Mediator", "<version>")]
[ExcludeFromCodeCoverage]
internal static class PingHandler_Ping_Handler
{
    public static async System.Threading.Tasks.Task<string> HandleAsync(System.IServiceProvider serviceProvider, Ping message, System.Threading.CancellationToken cancellationToken)
    {
        var logger = serviceProvider.GetService<ILoggerFactory>()?.CreateLogger("PingHandler");
        logger?.LogDebug("Processing message {MessageType}", "Ping");

        using var activity = MediatorActivitySource.Instance.StartActivity("Ping");
        activity?.SetTag("messaging.system", "Foundatio.Mediator");
        activity?.SetTag("messaging.message.type", "Ping");

        string? handlerResult = null;
        var handlerInstance = GetOrCreateHandler(serviceProvider);
        handlerResult = await handlerInstance.HandleAsync(message, cancellationToken);

        logger?.LogDebug("Completed processing message {MessageType}", "Ping");
        activity?.SetStatus(System.Diagnostics.ActivityStatusCode.Ok);
        return handlerResult;
    }

    public static async ValueTask<object?> UntypedHandleAsync(IMediator mediator, object message, CancellationToken cancellationToken, Type? responseType)
    {
        using var handlerScope = GetOrCreateScope(mediator, cancellationToken);
        var typedMessage = (Ping)message;
        var result = await HandleAsync(handlerScope.Services, typedMessage, cancellationToken);

        if (responseType == null)
        {
            return null;
        }

        return result;
    }

    [DebuggerStepThrough]
    private static HandlerScopeValue GetOrCreateScope(IMediator mediator, CancellationToken cancellationToken)
    {
        return HandlerScope.GetOrCreate(mediator, cancellationToken);
    }

    private static PingHandler? _handler;
    private static readonly global::System.Threading.Lock _lock = new();

    [DebuggerStepThrough]
    private static PingHandler GetOrCreateHandler(IServiceProvider serviceProvider)
    {
        if (_handler != null)
            return _handler;

        var handlerFromDI = serviceProvider.GetService<PingHandler>();
        if (handlerFromDI != null)
            return handlerFromDI;

        lock (_lock)
        {
            if (_handler != null)
                return _handler;

            _handler = ActivatorUtilities.CreateInstance<PingHandler>(serviceProvider);
            return _handler;
        }
    }
}

    },
    {
      HintName: Tests_MediatorHandlers.g.cs,
      Source:
// This file was generated by Foundatio.Mediator source generators.
// Changes to this file may be lost when the code is regenerated.
// </auto-generated>

#nullable enable

using Microsoft.Extensions.DependencyInjection;
using System;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading;
using System.Threading.Tasks;

[assembly: Foundatio.Mediator.FoundatioHandlerModule]

namespace Foundatio.Mediator;

[global::System.CodeDom.Compiler.GeneratedCode("Foundatio.Mediator", "<version>")]
[ExcludeFromCodeCoverage]
public static class Tests_MediatorHandlers
{
    public static void AddHandlers(this IServiceCollection services)
    {
        // Register HandlerRegistration instances keyed by message type name
        // Optionally register handler classes into DI based on MediatorHandlerLifetime setting

        services.AddKeyedSingleton<HandlerRegistration>(typeof(Ping).FullName!,
            new HandlerRegistration(
                typeof(Ping).FullName!,
                PingHandler_Ping_Handler.UntypedHandleAsync,
                null,
                true));

    }
}

    }
  ]
}
