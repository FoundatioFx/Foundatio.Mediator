{
  Diagnostics: null,
  GeneratorDiagnostics: null,
  GeneratedTrees: [
    {
      HintName: InterceptsLocationAttribute.g.cs,
      Source:
// This file was generated by Foundatio.Mediator source generators.
// Changes to this file may be lost when the code is regenerated.
// </auto-generated>

#nullable enable

using System;

namespace System.Runtime.CompilerServices;

/// <summary>
/// Indicates that a method is an interceptor and provides the location of the intercepted call.
/// </summary>
[global::System.CodeDom.Compiler.GeneratedCode("Foundatio.Mediator", "<version>")]
[global::System.AttributeUsage(global::System.AttributeTargets.Method, AllowMultiple = true)]
internal sealed class InterceptsLocationAttribute : global::System.Attribute
{
    /// <summary>
    /// Initializes a new instance of the <see cref="InterceptsLocationAttribute"/> class.
    /// </summary>
    /// <param name="version">The version of the location encoding.</param>
    /// <param name="data">The encoded location data.</param>
    public InterceptsLocationAttribute(int version, string data)
    {
        Version = version;
        Data = data;
    }

    /// <summary>
    /// Gets the version of the location encoding.
    /// </summary>
    public int Version { get; }

    /// <summary>
    /// Gets the encoded location data.
    /// </summary>
    public string Data { get; }
}

    },
    {
      HintName: PingHandler_Ping_Handler.g.cs,
      Source:
// This file was generated by Foundatio.Mediator source generators.
// Changes to this file may be lost when the code is regenerated.
// </auto-generated>

#nullable enable

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

namespace Foundatio.Mediator;

[global::System.CodeDom.Compiler.GeneratedCode("Foundatio.Mediator", "<version>")]
[ExcludeFromCodeCoverage]
internal static class PingHandler_Ping_Handler
{
    public static void Handle(Foundatio.Mediator.IMediator mediator, Ping message, System.Threading.CancellationToken cancellationToken)
    {
        var serviceProvider = (System.IServiceProvider)mediator;
        var loggerFactory = serviceProvider.GetService<ILoggerFactory>();
        var logger = loggerFactory?.CreateLogger("global::PingHandler");
        logger?.LogDebug("Processing message {MessageType}", "Ping");

        global::PingHandler.Handle(message);
        logger?.LogDebug("Completed processing message {MessageType}", "Ping");
    }

    public static object? UntypedHandle(IMediator mediator, object message, CancellationToken cancellationToken, Type? responseType)
    {
        var typedMessage = (Ping)message;
        Handle(mediator, typedMessage, cancellationToken);
        return null;
    }
}

    },
    {
      HintName: Tests_MediatorHandlers.g.cs,
      Source:
// This file was generated by Foundatio.Mediator source generators.
// Changes to this file may be lost when the code is regenerated.
// </auto-generated>

#nullable enable

using Microsoft.Extensions.DependencyInjection;
using System;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading;
using System.Threading.Tasks;

[assembly: Foundatio.Mediator.FoundatioHandlerModule]

namespace Foundatio.Mediator;

[global::System.CodeDom.Compiler.GeneratedCode("Foundatio.Mediator", "<version>")]
[DebuggerStepThrough]
[DebuggerNonUserCode]
[ExcludeFromCodeCoverage]
public static class Tests_MediatorHandlers
{
    [DebuggerStepThrough]
    public static void AddHandlers(this IServiceCollection services)
    {
        // Register HandlerRegistration instances keyed by message type name
        // Optionally register handler classes into DI based on MediatorHandlerLifetime setting

        services.AddKeyedSingleton<HandlerRegistration>(typeof(Ping).FullName!,
            new HandlerRegistration(
                typeof(Ping).FullName!,
                (mediator, message, cancellationToken, responseType) => new ValueTask<object?>(PingHandler_Ping_Handler.UntypedHandle(mediator, message, cancellationToken, responseType)),
                PingHandler_Ping_Handler.UntypedHandle,
                false));

    }
}

    }
  ]
}